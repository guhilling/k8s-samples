apiVersion: v1
kind: ConfigMap
metadata:
  name: www-content
  annotations:
    hilling.de/contact: gunnar@hilling.de
  labels:
    app.kubernetes.io/name: mis
data:
  index.html: |
    <h1>Kubernetes (K8s)</h1>
    Diese Datei wird aus einer ConfigMap gelesen.
    <h2>Alternativen</h2>
    Wir könnten sie genauso in einem Secret abspeichern, bei dem der Zugriff stärker eingeschränkt ist.
    Oder wir definieren uns Persistent Storage und haben dann auch die Möglichkeit, die Inhalte zu ändern, beispielsweise für Datenbanken.
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    hilling.de/contact: gunnar@hilling.de
  labels:
    app: apache
    app.kubernetes.io/name: mis
  name: apache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: apache
  template:
    metadata:
      labels:
        app: apache
        app.kubernetes.io/name: mis
      annotations:
        hilling.de/contact: gunnar@hilling.de
    spec:
      containers:
      - image: registry.access.redhat.com/ubi8/httpd-24:latest
        name: apache
        livenessProbe:
          exec:
            command:
              - "/bin/sh"
              - "-c"
              - "if [ -f /tmp/failed ]; then exit 1; fi"
          failureThreshold: 5
          periodSeconds: 2
          timeoutSeconds: 1
        readinessProbe:
          httpGet:
            path: "/"
            port: 8080
          failureThreshold: 1
          periodSeconds: 10
          timeoutSeconds: 1
        startupProbe:
          exec:
            command:
              - "/bin/sh"
              - "-c"
              - "sleep 10"
          timeoutSeconds: 20
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 500m
            memory: 200Mi
        volumeMounts:
          - mountPath: /var/www/html
            name: www-volume
      volumes:
      - configMap:
          defaultMode: 420
          name: www-content
        name: www-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: apache
  name: apache
spec:
  ports:
  - port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: apache
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: apache
  name: apache
spec:
  port:
    targetPort: 8080
  to:
    kind: ""
    name: apache
